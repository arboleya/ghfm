// Generated by CoffeeScript 1.6.3
var action, app, arg, config, connect, exec, filepath, fs, fsu, help, index, init, io, onchange, open, path, port, publ1c, refresh, refresher, render, request, save, serve, template, _ref;

require('source-map-support').install();

fs = require('fs');

path = require('path');

request = require('request');

exec = require('child_process').exec;

fsu = require('fs-util');

connect = require('connect');

io = require('socket.io');

require('colors');

filepath = null;

publ1c = path.join(__dirname, '..', 'public');

index = path.join(publ1c, 'index.html');

template = path.join(publ1c, 'template.html');

template = fs.readFileSync(template, 'utf-8');

init = function(file) {
  if (!fs.existsSync(file)) {
    return console.log('File not found: ', arg);
  }
  fsu.watch(filepath = file).on('change', onchange);
  return render(function(html) {
    save(html);
    serve();
    return open();
  });
};

onchange = function(done) {
  return render(function(html) {
    save(html);
    return refresh();
  });
};

render = function(done) {
  var buffer, data, token, token_path, url;
  buffer = fs.readFileSync(filepath, 'utf-8');
  url = 'https://api.github.com/markdown';
  data = {
    text: buffer,
    mode: 'markdown'
  };
  token_path = path.join(__dirname, 'token.secret');
  if (fs.existsSync(token_path)) {
    token = fs.readFileSync(token_path, 'utf-8');
    data.oauth = {
      consumer_secret: token
    };
  }
  return request.post(url, {
    json: data,
    encoding: 'utf-8'
  }, function(req, res) {
    return done(res.body);
  });
};

save = function(html) {
  return fs.writeFileSync(index, template.replace('~CONTENT', html));
};

port = null;

app = null;

refresher = null;

serve = function() {
  var address;
  port = 54321;
  app = connect().use(connect["static"](publ1c)).listen(port);
  address = 'http://localhost:' + port;
  console.log("♫ Preview running at " + address);
  return refresher = io.listen(12345, {
    'log level': 0
  });
};

open = function() {
  return exec('open http://localhost:54321 > /dev/null');
};

refresh = function() {
  return refresher.sockets.emit('refresh');
};

config = function(token) {
  if (token != null) {
    fs.writeFileSync(path.join(__dirname, 'token.secret'), token);
    return console.log('Token saved successfully!');
  } else {
    console.log('Token not informed, i.e.');
    return console.log('\t➜  ghfm config <token>');
  }
};

help = function() {
  var version;
  version = require(path.join(__dirname, '..', 'package.json')).version;
  return console.log("GHFM " + ('v' + version).grey + "\n" + 'Github Flavored Markdown previwer'.grey + "\n\nUsage:\n    ghfm [" + 'path'.green + "]\n    ghfm [" + 'config'.green + "] [" + 'token'.green + "]\n\nOptions:\n    config  Set your token to raise API limit to 5k/h\n\nExamples:\n    ghfm " + '/path/to/my/file.md'.grey + "\n    ghfm config " + 'da7d9999f91c74d11eee31beef852dd58ff0a357'.grey + "\n\n" + 'To generate a new token, go to:'.grey + "\n  " + 'https://github.com/settings/applications'.cyan);
};

_ref = process.argv.slice(2), action = _ref[0], arg = _ref[1];

switch (action) {
  case 'config':
    config(arg);
    break;
  case 'help':
    help();
    break;
  default:
    if (action != null) {
      init(action);
    } else {
      help();
    }
}

/*
//@ sourceMappingURL=index.map
*/
